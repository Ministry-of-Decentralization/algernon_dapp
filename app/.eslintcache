[{"/home/steve/codes/algernon_dapp/app/src/index.js":"1","/home/steve/codes/algernon_dapp/app/src/serviceWorker.js":"2","/home/steve/codes/algernon_dapp/app/src/App.js":"3","/home/steve/codes/algernon_dapp/app/src/theme.js":"4","/home/steve/codes/algernon_dapp/app/src/utils/apolloClient.js":"5","/home/steve/codes/algernon_dapp/app/src/config.js":"6","/home/steve/codes/algernon_dapp/app/src/components/pages/Overview.js":"7","/home/steve/codes/algernon_dapp/app/src/components/pages/Tags.js":"8","/home/steve/codes/algernon_dapp/app/src/components/pages/Profile.js":"9","/home/steve/codes/algernon_dapp/app/src/components/pages/Topic.js":"10","/home/steve/codes/algernon_dapp/app/src/components/providers/WalletProvider.js":"11","/home/steve/codes/algernon_dapp/app/src/components/pages/Users.js":"12","/home/steve/codes/algernon_dapp/app/src/components/providers/FileStoreProvider.js":"13","/home/steve/codes/algernon_dapp/app/src/components/pages/Tag.tsx":"14","/home/steve/codes/algernon_dapp/app/src/components/pages/Topics.tsx":"15","/home/steve/codes/algernon_dapp/app/src/components/pages/About.tsx":"16","/home/steve/codes/algernon_dapp/app/src/components/pages/Admin.tsx":"17","/home/steve/codes/algernon_dapp/app/src/components/layouts/MainLayout.js":"18","/home/steve/codes/algernon_dapp/app/src/components/hooks/useGetAccount.js":"19","/home/steve/codes/algernon_dapp/app/src/fileStorage/ipfs.js":"20","/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/layouts/Sidebar.js":"21","/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/layouts/Topbar.js":"22","/home/steve/codes/algernon_dapp/app/src/components/organisms/Colleges/CollegeCards.js":"23","/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagsMain.js":"24","/home/steve/codes/algernon_dapp/app/src/components/organisms/Profile/ProfileMain.js":"25","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/optionsFormatters.js":"26","/home/steve/codes/algernon_dapp/app/src/components/atoms/Box.js":"27","/home/steve/codes/algernon_dapp/app/src/queries/tag.tsx":"28","/home/steve/codes/algernon_dapp/app/src/queries/topic.tsx":"29","/home/steve/codes/algernon_dapp/app/src/components/organisms/Users/UserList.tsx":"30","/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/Detail.tsx":"31","/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagDetail.js":"32","/home/steve/codes/algernon_dapp/app/src/components/organisms/Topics/TopicList.tsx":"33","/home/steve/codes/algernon_dapp/app/src/components/organisms/Admin/Main.tsx":"34","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/UpdateTopicMeta.js":"35","/home/steve/codes/algernon_dapp/app/src/components/atoms/RichText.js":"36","/home/steve/codes/algernon_dapp/app/src/components/molecules/user/Badge.js":"37","/home/steve/codes/algernon_dapp/app/src/components/atoms/Link.js":"38","/home/steve/codes/algernon_dapp/app/src/components/atoms/Flex.js":"39","/home/steve/codes/algernon_dapp/app/src/components/atoms/Chip.js":"40","/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/NotesAndForm.tsx":"41","/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/MetaAndForm.tsx":"42","/home/steve/codes/algernon_dapp/app/src/components/atoms/Paper.js":"43","/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/ListItem.tsx":"44","/home/steve/codes/algernon_dapp/app/src/components/molecules/admin/Roles.tsx":"45","/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagsAdmin.tsx":"46","/home/steve/codes/algernon_dapp/app/src/components/atoms/Address.js":"47","/home/steve/codes/algernon_dapp/app/src/components/atoms/Blockie.js":"48","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/Text.js":"49","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/Select.js":"50","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/utils.js":"51","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/buttons/Button.js":"52","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/UpdateTopicNotes.js":"53","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/buttons/MutationButton.js":"54","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/CallAndWeb3Form.tsx":"55","/home/steve/codes/algernon_dapp/app/src/schemas/topic.js":"56","/home/steve/codes/algernon_dapp/app/src/components/atoms/Modal.tsx":"57","/home/steve/codes/algernon_dapp/app/src/components/molecules/tags/TagBadges.js":"58","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/CreateTag.js":"59","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/MutationForm.tsx":"60","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/Role.tsx":"61","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/ErrorMessage.js":"62","/home/steve/codes/algernon_dapp/app/src/utils/formatters/index.js":"63","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/RichText.js":"64","/home/steve/codes/algernon_dapp/app/src/schemas/common.js":"65","/home/steve/codes/algernon_dapp/app/src/schemas/tag.js":"66","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/common.tsx":"67","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/Web3Form.tsx":"68","/home/steve/codes/algernon_dapp/app/src/schemas/admin.ts":"69","/home/steve/codes/algernon_dapp/app/src/schemas/user.js":"70","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/CreateTopic.js":"71","/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagList.js":"72","/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/components/ImageCard.js":"73","/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/components/SidebarNav.js":"74","/home/steve/codes/algernon_dapp/app/src/components/molecules/user/BlockieAddress.tsx":"75","/home/steve/codes/algernon_dapp/app/src/components/organisms/ConnectedWallet/index.tsx":"76","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/SelectWallet.tsx":"77","/home/steve/codes/algernon_dapp/app/src/utils/web3.ts":"78","/home/steve/codes/algernon_dapp/app/src/schemas/wallet.ts":"79","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/CardSelect.tsx":"80","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/BasicForm.tsx":"81","/home/steve/codes/algernon_dapp/app/src/components/atoms/logos/MetaMask.tsx":"82","/home/steve/codes/algernon_dapp/app/src/components/atoms/logos/Fortmatic.tsx":"83","/home/steve/codes/algernon_dapp/app/src/utils/wallets/index.ts":"84","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/CardItem.tsx":"85","/home/steve/codes/algernon_dapp/app/src/components/atoms/logos/Base.tsx":"86","/home/steve/codes/algernon_dapp/app/src/utils/wallets/fortmatic.ts":"87","/home/steve/codes/algernon_dapp/app/src/utils/wallets/metamask.ts":"88","/home/steve/codes/algernon_dapp/app/src/utils/wallets/base.ts":"89"},{"size":984,"mtime":1603938262735,"results":"90","hashOfConfig":"91"},{"size":4948,"mtime":1593918231962,"results":"92","hashOfConfig":"91"},{"size":1885,"mtime":1608861786929,"results":"93","hashOfConfig":"91"},{"size":103,"mtime":1603938262735,"results":"94","hashOfConfig":"91"},{"size":699,"mtime":1593918231962,"results":"95","hashOfConfig":"91"},{"size":359,"mtime":1600742087734,"results":"96","hashOfConfig":"91"},{"size":1535,"mtime":1609211392070,"results":"97","hashOfConfig":"91"},{"size":811,"mtime":1608861786933,"results":"98","hashOfConfig":"91"},{"size":1659,"mtime":1609463053525,"results":"99","hashOfConfig":"91"},{"size":1485,"mtime":1608861786933,"results":"100","hashOfConfig":"91"},{"size":1718,"mtime":1608861786933,"results":"101","hashOfConfig":"91"},{"size":642,"mtime":1609463071925,"results":"102","hashOfConfig":"91"},{"size":1258,"mtime":1603942962235,"results":"103","hashOfConfig":"91"},{"size":955,"mtime":1608861786933,"results":"104","hashOfConfig":"91"},{"size":941,"mtime":1608861786933,"results":"105","hashOfConfig":"91"},{"size":113,"mtime":1594100924893,"results":"106","hashOfConfig":"91"},{"size":1202,"mtime":1608861786933,"results":"107","hashOfConfig":"91"},{"size":555,"mtime":1603427654149,"results":"108","hashOfConfig":"91"},{"size":391,"mtime":1600742087730,"results":"109","hashOfConfig":"91"},{"size":718,"mtime":1606023970445,"results":"110","hashOfConfig":"91"},{"size":2218,"mtime":1608861786933,"results":"111","hashOfConfig":"91"},{"size":1563,"mtime":1603653991897,"results":"112","hashOfConfig":"91"},{"size":589,"mtime":1609299891730,"results":"113","hashOfConfig":"91"},{"size":175,"mtime":1608861786933,"results":"114","hashOfConfig":"91"},{"size":960,"mtime":1603651483352,"results":"115","hashOfConfig":"91"},{"size":455,"mtime":1608861786933,"results":"116","hashOfConfig":"91"},{"size":591,"mtime":1597543343055,"results":"117","hashOfConfig":"91"},{"size":1902,"mtime":1608861786933,"results":"118","hashOfConfig":"91"},{"size":3344,"mtime":1600742087734,"results":"119","hashOfConfig":"91"},{"size":1018,"mtime":1609463104837,"results":"120","hashOfConfig":"91"},{"size":4031,"mtime":1609304971147,"results":"121","hashOfConfig":"91"},{"size":215,"mtime":1603729009185,"results":"122","hashOfConfig":"91"},{"size":432,"mtime":1604194227239,"results":"123","hashOfConfig":"91"},{"size":843,"mtime":1608861786933,"results":"124","hashOfConfig":"91"},{"size":4063,"mtime":1603659791276,"results":"125","hashOfConfig":"91"},{"size":279,"mtime":1593918231954,"results":"126","hashOfConfig":"91"},{"size":537,"mtime":1604201206839,"results":"127","hashOfConfig":"91"},{"size":156,"mtime":1593918231954,"results":"128","hashOfConfig":"91"},{"size":196,"mtime":1593918231954,"results":"129","hashOfConfig":"91"},{"size":465,"mtime":1593918231954,"results":"130","hashOfConfig":"91"},{"size":1409,"mtime":1604195459259,"results":"131","hashOfConfig":"91"},{"size":1557,"mtime":1600742087730,"results":"132","hashOfConfig":"91"},{"size":187,"mtime":1593918231954,"results":"133","hashOfConfig":"91"},{"size":936,"mtime":1609356424537,"results":"134","hashOfConfig":"91"},{"size":1228,"mtime":1608861786933,"results":"135","hashOfConfig":"91"},{"size":568,"mtime":1608861786933,"results":"136","hashOfConfig":"91"},{"size":216,"mtime":1593918231954,"results":"137","hashOfConfig":"91"},{"size":194,"mtime":1604163617882,"results":"138","hashOfConfig":"91"},{"size":506,"mtime":1597543343055,"results":"139","hashOfConfig":"91"},{"size":1330,"mtime":1597543343055,"results":"140","hashOfConfig":"91"},{"size":746,"mtime":1600742087730,"results":"141","hashOfConfig":"91"},{"size":324,"mtime":1603420403818,"results":"142","hashOfConfig":"91"},{"size":2485,"mtime":1600742087730,"results":"143","hashOfConfig":"91"},{"size":579,"mtime":1594098712866,"results":"144","hashOfConfig":"91"},{"size":4780,"mtime":1601697270849,"results":"145","hashOfConfig":"91"},{"size":1515,"mtime":1593918231962,"results":"146","hashOfConfig":"91"},{"size":1208,"mtime":1603562270510,"results":"147","hashOfConfig":"91"},{"size":315,"mtime":1604194371253,"results":"148","hashOfConfig":"91"},{"size":1485,"mtime":1608861786933,"results":"149","hashOfConfig":"91"},{"size":2410,"mtime":1600742087726,"results":"150","hashOfConfig":"91"},{"size":1170,"mtime":1608861786933,"results":"151","hashOfConfig":"91"},{"size":147,"mtime":1593918231954,"results":"152","hashOfConfig":"91"},{"size":167,"mtime":1601482996133,"results":"153","hashOfConfig":"91"},{"size":545,"mtime":1593918231954,"results":"154","hashOfConfig":"91"},{"size":283,"mtime":1593918231962,"results":"155","hashOfConfig":"91"},{"size":237,"mtime":1608861786933,"results":"156","hashOfConfig":"91"},{"size":263,"mtime":1600742087730,"results":"157","hashOfConfig":"91"},{"size":3311,"mtime":1609211989309,"results":"158","hashOfConfig":"91"},{"size":250,"mtime":1608861786933,"results":"159","hashOfConfig":"91"},{"size":859,"mtime":1594103488901,"results":"160","hashOfConfig":"91"},{"size":4057,"mtime":1608861786933,"results":"161","hashOfConfig":"91"},{"size":421,"mtime":1593918231954,"results":"162","hashOfConfig":"91"},{"size":2419,"mtime":1597543343059,"results":"163","hashOfConfig":"91"},{"size":2005,"mtime":1597543343059,"results":"164","hashOfConfig":"91"},{"size":431,"mtime":1604164218953,"results":"165","hashOfConfig":"91"},{"size":548,"mtime":1603654432716,"results":"166","hashOfConfig":"91"},{"size":2646,"mtime":1608861786933,"results":"167","hashOfConfig":"91"},{"size":743,"mtime":1603052181972,"results":"168","hashOfConfig":"91"},{"size":320,"mtime":1600742087734,"results":"169","hashOfConfig":"91"},{"size":1384,"mtime":1603424789787,"results":"170","hashOfConfig":"91"},{"size":885,"mtime":1600742087726,"results":"171","hashOfConfig":"91"},{"size":226,"mtime":1600742087726,"results":"172","hashOfConfig":"91"},{"size":230,"mtime":1600742087726,"results":"173","hashOfConfig":"91"},{"size":158,"mtime":1600742087734,"results":"174","hashOfConfig":"91"},{"size":1152,"mtime":1603425359042,"results":"175","hashOfConfig":"91"},{"size":251,"mtime":1600742087726,"results":"176","hashOfConfig":"91"},{"size":602,"mtime":1600742087734,"results":"177","hashOfConfig":"91"},{"size":451,"mtime":1600742087734,"results":"178","hashOfConfig":"91"},{"size":136,"mtime":1600742087734,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},"vd92ce",{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"182"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"182"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"182"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"182"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"182"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"182"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"216"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"216"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"216"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"182"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"182"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"182"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"216"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"216"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"182"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"182"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"182"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"216"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"182"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"182"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"182"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"182"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"216"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"182"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"182"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"216"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"216"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"216"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"216"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"216"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"216"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"216"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"216"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"216"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"216"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"216"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"216"},"/home/steve/codes/algernon_dapp/app/src/index.js",[],["398","399"],"/home/steve/codes/algernon_dapp/app/src/serviceWorker.js",[],"/home/steve/codes/algernon_dapp/app/src/App.js",[],"/home/steve/codes/algernon_dapp/app/src/theme.js",[],"/home/steve/codes/algernon_dapp/app/src/utils/apolloClient.js",[],"/home/steve/codes/algernon_dapp/app/src/config.js",[],"/home/steve/codes/algernon_dapp/app/src/components/pages/Overview.js",["400"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport CollegeCards from '../organisms/Colleges/CollegeCards'\nimport { WalletContext } from '../providers/WalletProvider'\nimport AccountTreeIcon from '@material-ui/icons/AccountTree'\nimport PeopleIcon from '@material-ui/icons/People'\nimport EnhancedEncryptionIcon from '@material-ui/icons/EnhancedEncryption'\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet'\n\n\n\nconst colleges = [\n  {\n    id: 1,\n    title: 'Blockchain School',\n    description: 'Bitcoin, Ethereum, and other crypto projects',\n    icon: <AccountTreeIcon />\n  },\n  {\n    id: 2,\n    title: 'Solidity',\n    description: 'Learn about Solidity and writing smart contracts.',\n    icon: <AccountBalanceWalletIcon />\n  },\n  {\n    id: 3,\n    title: 'Cryptography',\n    description: 'Cryptographic keys, encryption schemas, and the math the makes it all work.',\n    icon: <EnhancedEncryptionIcon />\n  },\n  {\n    id: 4,\n    title: 'Decentralized Applications',\n    description: 'Designing and developing dapps.',\n    icon: <PeopleIcon />\n  },\n]\n\nexport default () => {\n  // @ts-ignore\n  const { address, canViewAdmin } = useContext(WalletContext)\n\n  return (\n    <MainLayout\n      header={<Header />}\n      sidebar={<Sidebar selectedAddress={address} canViewAdmin={canViewAdmin} />}\n      main={<CollegeCards colleges={colleges}  />}\n    />\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/pages/Tags.js",["401"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport TagsMain from '../organisms/Tags/TagsMain'\nimport { useGetTags } from '../../queries/tag'\nimport { theGraphClient } from '../../utils/apolloClient'\nimport { WalletContext } from '../providers/WalletProvider'\n\n\nexport default () => {\n  // @ts-ignore\n  const { address, canViewAdmin } = useContext(WalletContext)\n  const {loading, tags} = useGetTags(theGraphClient, 0, 100)\n  const main = loading ? 'loading' : <TagsMain tags={tags} />\n  return (\n    <MainLayout\n      header={<Header />}\n      sidebar={<Sidebar selectedAddress={address} canViewAdmin={canViewAdmin} />}\n      main={main}\n    />\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/pages/Profile.js",["402"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport ProfileMain from '../organisms/Profile/ProfileMain'\nimport { useGetUser } from '../../queries/user';\nimport { useGetTopicsForOwner } from '../../queries/topic'\nimport { useGetTags } from '../../queries/tag'\nimport { theGraphClient } from '../../utils/apolloClient'\nimport { tagsToOptions } from '../atoms/inputs/optionsFormatters'\nimport { WalletContext } from '../providers/WalletProvider'\n\n\nexport default (props) => {\n  const address = props.match.params.address\n  const { topics, refetch: refetchTopics } = useGetTopicsForOwner(theGraphClient, 0, 100, address)\n  const { tags } = useGetTags(theGraphClient, 0, 100)\n  const tagOptions = tagsToOptions(tags || [])\n\n  const { user, loading : userLoading, refetch: refetchUser } = useGetUser(address);\n  // @ts-ignore\n  const { algernonInstance, address: connectedAddress, canViewAdmin } = useContext(WalletContext)\n\n  console.log(`in profile address ${address} -- connected address ${connectedAddress} -- ${algernonInstance}`)\n  const main = (\n    <div>\n      <ProfileMain\n        user={user}\n        userLoading={userLoading}\n        address={address}\n        connectedAddress={connectedAddress}\n        algernonInstance={algernonInstance}\n        tagOptions={tagOptions}\n        topics={topics || []}\n        refetchTopics={refetchTopics}\n        refetchUser={refetchUser}\n      />\n    </div>\n  )\n  return (\n  <MainLayout\n    header={<Header />}\n    sidebar={<Sidebar selectedAddress={connectedAddress} canViewAdmin={canViewAdmin} />}\n    main={main}\n  />\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/pages/Topic.js",["403"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport TopicDetail from '../molecules/topics/Detail'\nimport { useGetTopic, useGetTopics } from '../../queries/topic'\nimport { theGraphClient } from '../../utils/apolloClient'\nimport { tagsToOptions, topicsToOptions } from '../atoms/inputs/optionsFormatters'\nimport { useGetTags } from '../../queries/tag'\nimport { WalletContext } from '../providers/WalletProvider'\n\nexport default ({match: { params: id}}) => {\n  id = id.id\n\n  const { algernonInstance, canViewAdmin, address: connectedAddress } = useContext(WalletContext)\n\n  const { loading, topic, refetch: refetchTopic } = useGetTopic(theGraphClient, id)\n  const { topics } = useGetTopics(theGraphClient, 0, 100)\n  const topicOptions = topicsToOptions(topics || [])\n  const { tags } = useGetTags (theGraphClient, 0, 100)\n  const tagOptions = tagsToOptions(tags || [])\n\n  const main = loading || !topic ?\n    'loading' :\n    <TopicDetail\n      connectedAddress={connectedAddress}\n      algernonInstance={algernonInstance}\n      topic={topic}\n      topicOptions={topicOptions}\n      tagOptions={tagOptions}\n      refetchTopic={refetchTopic}\n    />\n    \n  return (\n    <MainLayout\n      header={<Header />}\n      sidebar={<Sidebar selectedAddress={connectedAddress} canViewAdmin={canViewAdmin} />}\n      main={ main }\n    />\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/providers/WalletProvider.js",["404"],"import React, { createContext, useReducer, useMemo } from 'react'\n\nconst UPDATE_TYPES = {\n  SET_WALLET_TYPE: 'SET_WALLET_TYPE',\n  SET_WALLET: 'SET_WALLET'\n}\n\nconst initialState = {\n  walletType: null,\n  wallet: null,\n  address: null,\n  isAdmin: false,\n  isTagger: false,\n  canViewAdmin: false,\n  provider: null\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case UPDATE_TYPES.SET_WALLET:\n      console.log(`reducin ${action.payload.address}`)\n      return {\n        ...state,\n        walletType: action.payload.walletType,\n        wallet: action.payload.wallet,\n        address: action.payload.address,\n        isAdmin: action.payload.isAdmin,\n        isTagger: action.payload.isTagger,\n        canViewAdmin: action.payload.isAdmin || action.payload.isTagger,\n        provider: action.payload.provider,\n        algernonInstance: action.payload.algernonInstance\n      }\n    default:\n      return state\n  }\n}\n\nexport const WalletContext = createContext(null)\n\nexport default ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  console.log(`state inside provider ${state && state.address}`)\n  const contextValue = useMemo(() => {\n    return {\n      ...state,\n      setWallet: ({ walletType, wallet, address, isAdmin, isTagger, algernonInstance, provider }) =>\n        dispatch({\n          type: UPDATE_TYPES.SET_WALLET,\n          payload: {\n            walletType,\n            wallet,\n            address,\n            isAdmin,\n            isTagger,\n            algernonInstance,\n            provider \n          }\n        })\n    };\n  }, [state, dispatch]);\n\n  return (\n    <WalletContext.Provider value={contextValue}>\n      {children}\n    </WalletContext.Provider>\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/pages/Users.js",["405"],"/home/steve/codes/algernon_dapp/app/src/components/providers/FileStoreProvider.js",["406","407"],"import React, { createContext, useReducer, useEffect, useMemo } from 'react'\nimport initIpfs from '../../fileStorage/ipfs'\n\nconst UPDATE_TYPES = {\n  SET_CLIENT: 'SET_CLIENT'\n}\n\nconst initialState = {\n  client: null\n}\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case UPDATE_TYPES.SET_CLIENT:\n      console.log(`reducin ${action.payload.address}`)\n      return {\n        ...state,\n        client: action.payload.client\n      }\n    default:\n      return state\n  }\n}\n\nexport const FileStoreContext = createContext(null)\n\nconst initClient = async (setClient) => {\n  const client = await initIpfs()\n  console.log(`inited client ${client}`)\n  setClient({client}) \n}\nconst Provider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  console.log(`state inside filestore provider ${state.client}`)\n\n  const contextValue = useMemo(() => {\n    return {\n      ...state,\n      setClient: ({ client }) => dispatch({type: UPDATE_TYPES.SET_CLIENT, payload: { client }})\n    };\n  }, [state, dispatch]);\n\n  useEffect(() => {\n    initClient(contextValue.setClient)\n  }, [null])\n\n  return (\n    <FileStoreContext.Provider value={contextValue}>\n      {children}\n    </FileStoreContext.Provider>\n  )\n}\n\nexport default Provider","/home/steve/codes/algernon_dapp/app/src/components/pages/Tag.tsx",["408"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport { useGetTag } from '../../queries/tag'\nimport { theGraphClient } from '../../utils/apolloClient'\nimport TagDetail from '../organisms/Tags/TagDetail'\nimport Box from '../atoms/Box'\nimport { WalletContext } from '../providers/WalletProvider'\n\n// @ts-ignore\nexport default ({match: { params: id}}) => {\n  // @ts-ignore\n  const { address, canViewAdmin } = useContext(WalletContext)\n  const {loading, tag} = useGetTag(theGraphClient, id.id)\n  const main = loading ?\n    'loading'\n    :\n    tag ?\n      <TagDetail tag={tag} />\n      :\n      <Box>Invalid Tag</Box>\n  return (\n    <MainLayout\n      header={<Header />}\n      // @ts-ignore\n      sidebar={<Sidebar selectedAddress={address} canViewAdmin={canViewAdmin} />}\n      main={main}\n    />\n  )\n}",["409","410"],"/home/steve/codes/algernon_dapp/app/src/components/pages/Topics.tsx",["411"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport TopicList from '../organisms/Topics/TopicList'\nimport { useGetTopics } from '../../queries/topic'\nimport { theGraphClient } from '../../utils/apolloClient'\nimport { WalletContext } from '../providers/WalletProvider'\n\n\nexport default () => {\n  // @ts-ignore\n  const { address, canViewAdmin } = useContext(WalletContext)\n  const {loading, topics} = useGetTopics(theGraphClient, 0, 100)\n  const topicList = (\n    <div>\n      <h2>Explore Courses</h2>\n      <TopicList topics={topics!} />\n    </div>\n  )\n  const main = loading ? loading : topicList\n  return (\n    <MainLayout\n      header={<Header />}\n      // @ts-ignore\n      sidebar={<Sidebar selectedAddress={address} canViewAdmin={canViewAdmin} />}\n      main={main}\n    />\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/pages/About.tsx",["412"],"import React from 'react'\n\nexport default () =>\n  <div>\n    Algernon is a peer to peer learning network.\n  </div>","/home/steve/codes/algernon_dapp/app/src/components/pages/Admin.tsx",["413","414"],"import React, { useContext } from 'react'\nimport MainLayout from '../layouts/MainLayout'\nimport Header from '../materialDashboard/layouts/Topbar'\nimport Sidebar from '../materialDashboard/layouts/Sidebar'\nimport AdminMain from '../organisms/Admin/Main'\nimport { useGetTags } from '../../queries/tag'\nimport { theGraphClient } from '../../utils/apolloClient'\nimport { WalletContext } from '../providers/WalletProvider'\nimport { tagsToOptions } from '../atoms/inputs/optionsFormatters'\n\n\nexport default () => {\n  // @ts-ignore\n  const { algernonInstance, address, isAdmin, isTagger, canViewAdmin } = useContext(WalletContext)\n  const {loading, tags} = useGetTags(theGraphClient, 0, 100)\n  console.log(`in admin ${algernonInstance}`)\n  const tagOptions = tagsToOptions(tags || [], [{value: '0', label: 'No Parent'}])\n  const main = loading || algernonInstance == undefined ? 'loading' : <AdminMain connectedAddress={address} algernonInstance={algernonInstance} tags={tagOptions} isAdmin={isAdmin} isTagger={isTagger} />\n  return (\n    <MainLayout\n      header={<Header />}\n      // @ts-ignore\n      sidebar={<Sidebar selectedAddress={address} canViewAdmin={canViewAdmin} />}\n      main={main}\n    />\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/layouts/MainLayout.js",["415"],"import React, {Fragment} from 'react'\nimport Flex from '../atoms/Flex'\nimport Box from '../atoms/Box'\n\nexport default ({ header, sidebar, main }) =>\n  <Fragment>\n    <Flex>\n      <Box justifyContent=\"center\">{header}</Box>\n    </Flex>\n    <div style={{ display: 'flex', direction: 'row', marginTop: '1em', height: 'inherit' }}>\n      <div style={{ width: '15%', backgroundColor: '#edf1f5' }}>\n        {sidebar}\n      </div>\n      <div style={{ width: '80%', paddingLeft: '2.5%', marginTop: '1.5em' }}>\n        {main}\n      </div>\n    </div>\n  </Fragment>\n","/home/steve/codes/algernon_dapp/app/src/components/hooks/useGetAccount.js",["416","417","418","419"],"import React, {useEffect, useState} from 'react'\n// import  { web3 } from '../../utils/web3'\n\nexport default () => {\n  const [account, setAccount] = useState(null)\n  /*\n  const getAccounts = async () => {\n    const accounts = await web3.eth.getAccounts()\n    accounts[0] && setAccount(accounts[0].toString())\n  }\n  */\n\n  useEffect(() => {\n    //getAccounts()\n  }, [null])\n\n  return account\n}","/home/steve/codes/algernon_dapp/app/src/fileStorage/ipfs.js",["420"],"const ipfs = require('ipfs-http-client')\n\nexport default async (ipfsEndpoint) => {\n  console.log(`getting ipfs client`)\n  ipfsEndpoint = \"/ip4/0.0.0.0/tcp/5001\" || ipfsEndpoint || process.env.IPFS_ENDPOINT || \"/ip4/0.0.0.0/tcp/5001\"\n\n  const ipfsClient = ipfs(ipfsEndpoint)\n\n  const clientId = await ipfsClient.id()\n  console.log(`initing ipfs client at ${ipfsEndpoint} -- client id ${clientId}`)\n\n\n  const saveFile = async (fileData) => {\n    console.log(`saving file ${fileData}`)\n    const savedFile = await ipfsClient.add(fileData)\n    console.log('saved file is ', savedFile)\n  \n    return savedFile.cid.toString()\n  }\n\n  const getFile = (url) => ipfsClient.get(url)\n\n  return {\n    saveFile,\n    getFile\n  }\n}\n\n\n","/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/layouts/Sidebar.js",[],"/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/layouts/Topbar.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Colleges/CollegeCards.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagsMain.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Profile/ProfileMain.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/optionsFormatters.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Box.js",[],"/home/steve/codes/algernon_dapp/app/src/queries/tag.tsx",["421","422"],"import { gql } from 'apollo-boost';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { Tag as TagType } from 'theGraphTypes';\n\ninterface TagQueryVars {\n  skip?: number,\n  first?: number,\n  ids?: string[],\n  id?: string\n}\n\ninterface TagFilteredQueryVars {\n  tag_contains: string,\n  first: number\n}\n\ninterface GetTagsData {\n  tags: TagType[]\n}\n\ninterface GetTagData {\n  tag: TagType\n}\n\nexport const GET_TAGS = gql`\n  query tags($skip: Int!, $first: Int!){\n    tags(skip: $skip, first: $first) {\n      id\n      tag\n      topics {\n        id\n      }\n    }\n}\n`;\n\nexport const useGetTags = (client: any, skip: number, first: number) => {\n  const {loading, error, data} =  useQuery<GetTagsData, TagQueryVars>(\n    GET_TAGS,\n    {\n      client,\n      variables: {\n        skip,\n        first\n      },\n      fetchPolicy: 'no-cache'\n    });\n\n  return {\n    loading,\n    error,\n    tags: data ? data.tags : null\n  } \n}\n\nexport const GET_TAG = gql`\n  query tag($id: String!){\n    tag(id: $id) {\n      id\n      tag\n      topics {\n        id\n        owner {\n          address\n        }\n        tags {\n          id\n          tag\n        }\n        title\n        description\n        url\n      }\n    }\n}\n`;\n\nexport const useGetTag = (client: any, id: string) => {\n  const {loading, error, data} = useQuery<GetTagData, TagQueryVars>(\n    GET_TAG,\n    {\n      client,\n      variables: {id}\n    });\n  \n  return {\n    loading,\n    error,\n    tag: data ? data.tag : null\n  } \n}\n\nexport const GET_FILTERED_TAGS = gql`\n  query tags($tag_contains: String!, $first: Int!){\n    tags(where: {tag_contains: $tag_contains}, first: $first) {\n      id\n      tag\n      topics {\n        id\n      }\n    }\n}\n`;\n\nexport const getFilteredTags = (client: any, tag_contains: string) => {\n  const limit = 50\n  return client.query(\n    {\n      query: GET_FILTERED_TAGS,\n      variables: {tag_contains, first: limit}\n    });\n}","/home/steve/codes/algernon_dapp/app/src/queries/topic.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Users/UserList.tsx",["423"],"/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/Detail.tsx",["424","425"],"// @ts-nocheck\n\nimport React, { Fragment } from 'react'\nimport Paper from '../../atoms/Paper'\nimport Chip from '../../atoms/Chip'\nimport Link from '../../atoms/Link'\nimport Box from '../../atoms/Box'\nimport Flex from '../../atoms/Flex'\nimport RichText from '../../atoms/RichText'\nimport Badge from '../user/Badge'\nimport MetaAndForm from './MetaAndForm'\nimport NotesAndForm from './NotesAndForm'\nimport UpdateTopicMetaForm from '../../organisms/forms/UpdateTopicMeta'\n\n\nconst equalAddresses = (addressA: string, addressB: string) => {\n  return typeof addressA === 'string' && typeof addressB === 'string' && addressA.toLowerCase() === addressB.toLowerCase()\n}\n\ntype TopicDetailProps = {\n  connectedAddress: string,\n  tagOptions: string[],\n  topicOptions: string[],\n  topic: any,\n  refetchTopic: any,\n  algernonInstance: any\n}\n\nconst RelatedCourse = (props:any) => {\n  const topic = props.topic\n\n  return (\n    <Paper>\n      <Link to={`/topic/${topic.id}`} element={<h4>{topic.title}</h4>} />\n      <p>{topic.description}</p>\n    </Paper>\n  )\n}\n\nexport default (props: TopicDetailProps): React.ReactNode => {\n  const { connectedAddress, algernonInstance, topic, topicOptions, tagOptions, refetchTopic } = props\n  const { title, url, description, owner, notes, requires, supports, tags, updatedAt } = topic\n  const containerStyle = { margin:\"2em\", padding: \"2em\" }\n\n  const isOwner = equalAddresses(owner.address, connectedAddress)\n  const createdEl = (\n    <div style={{color: '#808080', marginTop: '.5em', fontStyle: 'italic', fontSize: '.9em'}}>\n      Last Updated: {new Date(1000*updatedAt).toLocaleDateString()}\n    </div>\n  )\n\n  const Notes: React.FC = () => (\n    <Flex flexDirection=\"column\" style={{ margin:\"1em\", padding: \"1em\" }}>\n      <h3>Curriculum</h3>\n      <Paper>\n        <RichText value={notes} />\n      </Paper>\n    </Flex>\n  )\n\n  const MetaDetails: React.FC = () => (\n    <div style={{marginTop: '2em'}}>\n      <Flex>\n        {isOwner &&\n          <UpdateTopicMetaForm\n            connectedAddress={connectedAddress}\n            algernonInstance={algernonInstance}\n            topic={topic} \n            topicOptions={topicOptions}\n            tagOptions={tagOptions}\n            refetchTopic={refetchTopic}\n          />\n        }\n      </Flex>\n      <Paper style={containerStyle}>\n        <Flex flexDirection=\"column\">\n          <Flex>\n            <Box style={{width: '70%'}}>\n              <h1>{title}</h1>\n            </Box>\n            <Box style={{width: '25%'}}>\n              <Badge address={owner.address} subEl={createdEl} />\n            </Box>\n          </Flex>\n          <Box>\n            {description}\n          </Box>\n          <Box>\n            <a target=\"blank\" href={'//'+url}>{url}</a>\n          </Box>\n          <Box>\n            {tags.map(tag => <Link id={tag.tag} to={`/tags/${tag.id}`} element={<Chip style={{cursor: 'pointer'}} label={tag.tag} />} />)}\n          </Box>\n          <Flex justifyContent=\"space-around\">\n            <Flex flexDirection=\"column\" style={{width: '50%'}}>\n              <h3>Requires Courses</h3>\n              {requires.length ? requires.map(topic => <RelatedCourse id={topic.id} topic={topic} />) : '-'}\n            </Flex>\n            <Flex flexDirection=\"column\">\n              <h3>Supports Courses</h3> {supports.length ? supports.map(topic => <RelatedCourse id={topic.id} topic={topic}  />) : '-'}\n            </Flex>\n          </Flex>\n        </Flex>\n      </Paper>\n    </div>\n  )\n\n  const editableMeta = (\n    <MetaAndForm\n      formProps ={{\n        connectedAddress,\n        algernonInstance,\n        topic,\n        topicOptions,\n        tagOptions,\n        refetchTopic\n      }}\n      defaultContent={<MetaDetails />} \n    />\n  )\n\n  const editableNotes = (\n    <NotesAndForm\n      formProps ={{\n        connectedAddress,\n        algernonInstance,\n        topic,\n        refetchTopic\n      }}\n      defaultContent={<Notes />} \n    />\n  )\n\n\n  \n  return (\n    <Fragment>\n      <MetaDetails />\n      {isOwner? editableNotes : <Notes />}\n    </Fragment>\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagDetail.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Topics/TopicList.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Admin/Main.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/UpdateTopicMeta.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/RichText.js",["426"],"import React from 'react'\nimport ReactQuill from 'react-quill'\n\nimport 'react-quill/dist/quill.snow.css';\n\n\nexport default (props) => (\n  <div style={{paddingBottom: '1.25em'}}>\n    <ReactQuill\n      value={props.value}\n      readOnly={true}\n      theme={\"bubble\"} />\n  </div>\n)\n","/home/steve/codes/algernon_dapp/app/src/components/molecules/user/Badge.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Link.js",["427"],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default ({to, element}) => (\n  <div>\n    <Link to={to}>{element}</Link>\n  </div>\n)","/home/steve/codes/algernon_dapp/app/src/components/atoms/Flex.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Chip.js",[],"/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/NotesAndForm.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/MetaAndForm.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Paper.js",["428"],"import React from 'react'\nimport Paper from '@material-ui/core/Paper'\n\nexport default props => \n  <Paper style={props.style ? props.style : {padding: 16}}>\n    {props.children}\n  </Paper>","/home/steve/codes/algernon_dapp/app/src/components/molecules/topics/ListItem.tsx",["429"],"import React from 'react'\nimport Paper from '../../atoms/Paper'\nimport { Link } from 'react-router-dom'\nimport { Topic } from 'theGraphTypes'\nimport Blockie from '../../atoms/Blockie'\nimport Flex from '../../atoms/Flex'\nimport TagBadges from '../tags/TagBadges'\n\nexport default ({ id, title, url, description, owner, tags }: Topic) => {\n\n  return (\n    <div style={{marginBottom: '1em'}}>\n      <Paper>\n        <Flex>\n          {owner && <div style={{margin: \"0 1.5em\"}}>\n            <Link to={`/profile/${owner.address}`}>\n              <Blockie address={owner?.address} size={10} scale={8} />\n            </Link>\n          </div>}\n          <div>\n            <Link to={`/topic/${id}`}><h2>{title}</h2></Link>\n            <p>{description}</p>\n          </div>\n          <Flex style={{width: '30%', marginLeft: 'auto', order: 2}}>\n            <TagBadges tags={tags} />\n          </Flex>\n        </Flex>\n      </Paper>\n    </div>\n  )\n  }","/home/steve/codes/algernon_dapp/app/src/components/molecules/admin/Roles.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagsAdmin.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Address.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Blockie.js",["430"],"import React from 'react'\nimport Blockies from 'react-blockies';\n\nexport default ({address, size, scale}) => (\n\n  <Blockies\n    seed={address}\n    size={size || 9}\n    scale={scale || 5}\n  />\n\n)","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/Text.js",["431"],"import React from 'react'\nimport { useField } from 'formik'\nimport TextField from '@material-ui/core/TextField'\nimport ErrorMessage from './ErrorMessage';\n\nexport default (props) => {\n  const [field, meta] = useField(props);\n  const isError = meta.touched && !!meta.error\n\n  return (\n    <div style={{paddingBottom: '1.25em'}}>\n      <TextField\n        {...field}\n        {...props}\n        error={isError} />\n      <ErrorMessage\n        isError={isError}\n        errorMsg={meta.error} />\n    </div>\n  )\n\n}","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/Select.js",[],"/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/utils.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/buttons/Button.js",["432"],"import React from 'react'\nimport Button from '@material-ui/core/Button'\n\nexport default ({onClick = () => {}, label, type = 'button', disabled = false, variant = 'contained',  style = {}}) =>\n  <Button variant={variant} onClick={onClick} color=\"primary\" type={type} disabled={disabled} style={style}>\n    {label}\n  </Button>","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/UpdateTopicNotes.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/buttons/MutationButton.js",["433","434"],"import React, { useEffect } from 'react'\nimport Button from '@material-ui/core/Button'\n\nexport default ({mutation, mutationVariables, handleResponse, label, disabled}) => {\n  const {mutationTrigger, loading, response, error, requestFinished} = mutation()\n  useEffect(() => {\n    if (requestFinished) {\n      handleResponse(response, error)\n    }\n  }, [loading])\n  const onClick = () => mutationTrigger({variables: mutationVariables})\n  return (\n    <Button variant='contained' onClick={onClick} color=\"primary\" type='button' disabled={disabled}>\n      {label}\n    </Button>\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/CallAndWeb3Form.tsx",[],"/home/steve/codes/algernon_dapp/app/src/schemas/topic.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/Modal.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/molecules/tags/TagBadges.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/CreateTag.js",[],"/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/MutationForm.tsx",["435"],"import React, {useState} from 'react'\nimport { Formik } from 'formik'\nimport { MutationFormProps, FormStateEls } from '../types'\nimport { Success, Error, Pending } from './common'\n\nconst onSubmit = ({ setSubmitting, setState, resetForm }: { setSubmitting: any, setState: any, resetForm: any })  => (response: any, error: any) => {\n  console.log(`got update user pro response ${JSON.stringify(response)}`)\n  if (response.loading) {\n  } else if (error) {\n    setState({error})\n    setSubmitting(false)\n  } else {\n    setSubmitting(false)\n    resetForm()\n    setState({response: response})\n  }\n}\n\nconst getContent = (\n  getForm: any,\n  state: any,\n  mutationVariables: any,\n  handleResponse: any,\n  isValid: boolean,\n  stateEls: FormStateEls,\n  formOnSuccess: boolean,\n  onSuccess: any\n  ) => {\n  const {\n    successEl,\n    pendingEl,\n    errorEl } = stateEls\n  \n  if (state.response) {\n    console.log(`mutations success ${onSuccess}`)\n    onSuccess()\n    return (\n      <div>\n        {formOnSuccess && getForm(mutationVariables, isValid, handleResponse)}\n        {successEl ? successEl(state.response) : <Success />}\n      </div>\n    )\n  } else if (state.error) {\n    // @ts-ignore\n    return errorEl ? errorEl(state.error) : <Error error={state.error} />\n  } else if (state.pending) {\n    return pendingEl ? pendingEl() : <Pending />\n  }\n\n  return getForm(mutationVariables, isValid, handleResponse)\n}\n\nconst InnerForm = ({formikProps, formProps}: {formikProps: any, formProps: MutationFormProps}) => {\n  {\n    const {values, setSubmitting, resetForm, isValid} = formikProps\n    const [state, setState] = useState({response: null, pending:null, errror: null})\n    \n    const handleResponse = onSubmit({setSubmitting, setState, resetForm})\n    const mutationVariables = {...values, ...formProps.staticMutationVariables}\n\n    return getContent(\n      formProps.getForm,\n      state,\n      mutationVariables,\n      handleResponse,\n      isValid,\n      formProps.stateEls,\n      formProps.formOnSuccess,\n      formProps.onSuccess\n      ) \n  }\n}\n\nconst MutationForm = (formProps: MutationFormProps) => {\n  return (\n    <Formik\n      initialValues={formProps.defaultValues}\n      validationSchema={formProps.schema}\n      onSubmit={(vals) => console.log(`form was submitted ${vals}`)}\n    >\n      {(props) => <InnerForm formikProps={props} formProps={formProps} />}\n    </Formik>\n  );\n};\n\nexport default MutationForm","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/Role.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/ErrorMessage.js",["436"],"import React from 'react'\n\nexport default ({isError, errorMsg}) => {\n\n  return isError ? (\n    <div className=\"error\">{errorMsg}</div>\n  ) : null\n}","/home/steve/codes/algernon_dapp/app/src/utils/formatters/index.js",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/RichText.js",["437"],"import React from 'react'\nimport ReactQuill from 'react-quill'\nimport { useField } from 'formik'\nimport 'react-quill/dist/quill.snow.css';\nimport ErrorMessage from './ErrorMessage';\n\nexport default (props) => {\n  const [field, meta] = useField(props);\n  const isError = meta.touched && !!meta.error\n\n  return (\n    <div style={{paddingBottom: '1.25em'}}>\n      <ReactQuill\n        value={field.value}\n        onChange={field.onChange(field.name)} />\n      <ErrorMessage\n        isError={isError}\n        errorMsg={meta.error} />\n    </div>\n  )\n}","/home/steve/codes/algernon_dapp/app/src/schemas/common.js",[],"/home/steve/codes/algernon_dapp/app/src/schemas/tag.js",[],"/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/common.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/Web3Form.tsx",["438"],"import React, {useState} from 'react'\nimport { Formik } from 'formik'\nimport { callMethod } from './utils'\nimport { Web3FormProps, FormStateEls } from '../types'\nimport { any } from 'prop-types'\n\n\n/*\ninterface CallMethodProps {\n  contractMethod: any;\n  connectedAddress: string;\n  args: any[];\n  handleTxHash: any;\n  handleReceipt: any;\n  handleError: any;\n  resetForm: any;\n  setSubmitting: any;\n}\n\ninterface FormProps {\n  defaultValues: any;\n  schema: any;\n  connectedAddress: string;\n  formArgs: string[];\n  staticArgs?: any[];\n  contractMethod: any;\n  getMethodArgs: any;\n}\n\ninterface State {\n  receipt: any;\n  txHash: string | null;\n  error: any;\n}\n*/\n\nconst Success = () => (\n  <div>\n    <h3>Transaction Success!</h3>\n  </div>\n)\n\nconst Error = () => (\n  <div>\n    <h3>Transaction Error!</h3>\n  </div>\n)\n\nconst Pending = () => (\n  <div>\n    <h3>Transaction Pending</h3>\n  </div>\n)\n\nconst getContent = (\n  getForm: any,\n  state: any,\n  submit: any,\n  isValid: boolean,\n  stateEls: FormStateEls,\n  formOnSuccess: boolean\n  ) => {\n  const { successEl, pendingEl, errorEl } = stateEls\n  if (state.receipt) {\n    return (\n      <div>\n        {formOnSuccess && getForm(submit)}\n        {successEl ? successEl(state.receipt) : <Success />}\n      </div>\n    )\n  } else if (state.error) {\n    // @ts-ignore\n    return errorEl ? errorEl(state.error) : <Error error={state.error} />\n  } else if (state.txHash) {\n    return pendingEl ? pendingEl(state.txHash) : <Pending />\n  }\n\n  return getForm(submit, isValid)\n}\n\ninterface InnerFormState {\n  receipt: any;\n  txHash?: string;\n  error: any;\n}\n\nconst initialState: InnerFormState = {\n  receipt: null,\n  txHash: undefined,\n  error: null,\n}\n\n\nconst InnerForm = ({formikProps, formProps}: {formikProps: any, formProps: Web3FormProps}) => {\n  const {\n    contractMethod,\n    connectedAddress,\n    methodArgs,\n    getMethodArgs,\n    getForm,\n    stateEls,\n    formOnSuccess,\n    staticArgs } = formProps\n  const {values, setSubmitting, resetForm, isValid} = formikProps\n  const [state, setState] = useState(initialState)\n\n  const handleTxHash = (txHash: string) => setState({...state, txHash})\n  const handleReceipt = (receipt: any) => {\n    console.log(`success tx receipt on broadcast ${JSON.stringify(receipt, null, 2)}`)\n    setState({...state, receipt})\n  }\n  const handleError = (error: any) => setState({...state, error})\n\n  const staticArgsProps = staticArgs || []\n  console.log(`in web3form methodArgs ${methodArgs}`)\n  const args = getMethodArgs ? getMethodArgs(values) : staticArgsProps.concat(methodArgs.map((arg: string) => values[arg]))\n  \n  const submit = () => isValid ?\n    callMethod({\n      contractMethod,\n      connectedAddress,\n      args,\n      handleTxHash,\n      handleReceipt,\n      handleError,\n      resetForm,\n      setSubmitting\n    })\n      :\n      () => {}\n  \n  return getContent(\n    getForm, \n    state,\n    submit,\n    isValid,\n    stateEls,\n    formOnSuccess\n    )\n}\n\nconst Web3Form = ({formProps}: {formProps:Web3FormProps}) => {\n\n  return (\n    <Formik\n      initialValues={formProps.defaultValues}\n      validationSchema={formProps.schema}\n      onSubmit={(vals) => console.log(`form was submitted ${vals}`)}\n    >\n      {(props) => <InnerForm formikProps={props} formProps={formProps} />}\n    </Formik>\n  )\n}\n\nexport default Web3Form","/home/steve/codes/algernon_dapp/app/src/schemas/admin.ts",[],"/home/steve/codes/algernon_dapp/app/src/schemas/user.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/CreateTopic.js",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/Tags/TagList.js",[],"/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/components/ImageCard.js",[],"/home/steve/codes/algernon_dapp/app/src/components/materialDashboard/components/SidebarNav.js",[],"/home/steve/codes/algernon_dapp/app/src/components/molecules/user/BlockieAddress.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/organisms/ConnectedWallet/index.tsx",["439"],"import React, { useContext } from 'react'\nimport Box from '../../atoms/Box'\nimport { WalletContext } from '../../providers/WalletProvider'\nimport SelectWallet from '../forms/SelectWallet'\nimport Badge from '../../molecules/user/Badge'\n\nexport default ({style}: any) => {\n  // @ts-ignore\n  const { wallet, setWallet, address } = useContext(WalletContext)\n  // @ts-ignore\n  const status = wallet ? <Badge address={address} textColor='#FFF' /> : <SelectWallet setWallet={setWallet} />\n  return (\n    <Box style={style}>\n      {status}\n    </Box>\n  )\n}","/home/steve/codes/algernon_dapp/app/src/components/organisms/forms/SelectWallet.tsx",["440"],"import React from 'react'\nimport web3 from 'web3'\nimport { Form } from 'formik'\nimport { selectWalletSchema, SUPPORTED_WALLETS } from '../../../schemas/wallet'\nimport wallets from '../../../utils/wallets'\nimport Button from '../../atoms/inputs/buttons/Button'\nimport BasicForm from '../../formikTLDR/forms/BasicForm'\nimport FortmaticIcon from '../../atoms/logos/Fortmatic'\nimport MetaMaskIcon from '../../atoms/logos/MetaMask'\nimport CardSelect from '../../atoms/inputs/CardSelect'\nimport Flex from '../../atoms/Flex'\nimport Modal from '../../atoms/Modal'\nimport { getAlgernonInstance } from '../../../utils/web3'\n\nconst walletOptions = [\n  {\n    icon: <FortmaticIcon size={6} />,\n    title:'Fortmatic',\n    value: SUPPORTED_WALLETS.FORTMATIC,\n    connectWallet: wallets.FORTMATIC.connectWallet\n  },\n  {\n    icon: <MetaMaskIcon size={6} />,\n    title:'MetaMask',\n    value: SUPPORTED_WALLETS.METAMASK,\n    connectWallet: wallets.METAMASK.connectWallet\n  }\n]\n\nconst getForm = (isValid: boolean, submit: any, close: any) => (\n  <div style={{width: \"22em\", padding: '1em'}}>\n  <Form>\n    <CardSelect name='walletType' options={walletOptions} />\n    <Flex justifyContent=\"flex-end\" mt='2em'>\n      <Button\n        onClick={() => {\n          close();\n        }}\n        style={{marginRight: '2em'}}\n        variant='outlined'\n        label=\"Cancel\" />\n      <Button\n        onClick={() => {\n          submit();\n          close();\n        }}\n        disabled={!isValid}\n        label=\"Sign In\" />\n    </Flex>\n  </Form>\n  </div>\n)\n\nconst getSubmitArgs = async (values: any) => {\n  // @ts-ignore\n  const [wallet, provider] = await wallets[values.walletType].connectWallet()\n  // @ts-ignore\n  const address = await wallets[values.walletType].getAddress(wallet)\n  const algernonInstance = getAlgernonInstance(wallet)\n  const isAdmin = await algernonInstance.methods.isAdmin(address).call()\n  const isTagger = await algernonInstance.methods.isTagger(address).call()\n  console.log(`got wallet address:${address}-- admin:${isAdmin}`)\n  return {\n    walletType: values.walletType,\n    wallet,\n    address,\n    isAdmin,\n    isTagger,\n    provider,\n    algernonInstance\n  }\n}\n\nconst SelectWalletForm = ({setWallet}: any) => {\n  const formProps = {\n    defaultValues: selectWalletSchema.defaultValues,\n    schema: selectWalletSchema.schema,\n    getForm: getForm,\n    getSubmitArgs,\n    submit: setWallet,\n    stateEls: {}\n  }\n\nreturn (\n  <Modal \n    triggerText='Sign In'\n    title='Connect Your Wallet'\n    contentText=''\n    getForm={(cancel: any) => <BasicForm\n      {...formProps}\n      cancel={cancel}\n    /> }\n    />\n  )\n}\n\nexport default SelectWalletForm \n","/home/steve/codes/algernon_dapp/app/src/utils/web3.ts",["441"],"const AlgernonArtifact = require(\"../abis/Algernon.json\")\n\nconst getLatestDeployment = (deployments: any) => {\n  const key = Object.keys(deployments).sort((a, b) => parseInt(a) - parseInt(b)).pop()\n  return deployments[key!]\n}\n\nconst algernonAddress = '0x26950f5d5B2eA2AC11d8A2cB67a62D8831Be3d8F'//getLatestDeployment(AlgernonArtifact.networks).address//[networkId].address;\n\nconst getDeployedContract = (web3: any, abi: any, address: string) => {\n  const contract =  new web3.eth.Contract(abi, address)\n  return contract\n}\n\n// export const algernonContract = getDeployedContract(null, AlgernonArtifact.abi, algernonAddress)\n\nexport const getAlgernonInstance = (web3: any) => getDeployedContract(web3, AlgernonArtifact.abi, algernonAddress)\n\n\n","/home/steve/codes/algernon_dapp/app/src/schemas/wallet.ts",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/CardSelect.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/formikTLDR/forms/BasicForm.tsx",["442"],"import React from 'react'\nimport { Formik } from 'formik'\nimport { BasicFormProps } from '../types'\n\nconst InnerForm = ({formikProps, formProps}: {formikProps: any, formProps: BasicFormProps}) => {\n  {\n    const {values, isValid} = formikProps\n    const { getForm, getSubmitArgs, submit, cancel } = formProps\n    \n    const onSubmit = async () => {\n      const args  = await getSubmitArgs(values)\n      console.log(`subbing ${args.address}`)\n      submit(args)\n    }\n    return getForm(isValid, onSubmit, cancel)\n  }\n}\n\nconst MutationForm = (formProps: BasicFormProps) => {\n  return (\n    <Formik\n      initialValues={formProps.defaultValues}\n      validationSchema={formProps.schema}\n      onSubmit={(vals) => console.log(`form was submitted ${vals}`)}\n    >\n      {(props) => <InnerForm formikProps={props} formProps={formProps} />}\n    </Formik>\n  );\n};\n\nexport default MutationForm","/home/steve/codes/algernon_dapp/app/src/components/atoms/logos/MetaMask.tsx",["443"],"import React from 'react'\nimport BaseIcon from './Base'\nimport metamaskIcon from '../../../logos/metamask.svg'\n\nexport default ({size = 1}) => (\n  <BaseIcon\n    src={metamaskIcon}\n    alt='MetaMAsk Icon'\n    size={size}\n  />\n)","/home/steve/codes/algernon_dapp/app/src/components/atoms/logos/Fortmatic.tsx",["444"],"import React from 'react'\nimport BaseIcon from './Base'\nimport fortmaticIcon from '../../../logos/fortmatic.svg'\n\nexport default ({size = 1}) => (\n  <BaseIcon\n    src={fortmaticIcon}\n    alt='Fortmatic Icon'\n    size={size}\n  />\n)","/home/steve/codes/algernon_dapp/app/src/utils/wallets/index.ts",["445"],"import FortmaticWallet from './fortmatic'\nimport MetaMaskWallet from './metamask'\n\nexport default {\n  FORTMATIC: FortmaticWallet,\n  METAMASK: MetaMaskWallet\n}","/home/steve/codes/algernon_dapp/app/src/components/atoms/inputs/CardItem.tsx",[],"/home/steve/codes/algernon_dapp/app/src/components/atoms/logos/Base.tsx",["446"],"import React from 'react'\n\ninterface Props {\n  src: string;\n  alt?: string;\n  size?: number;\n}\n\nexport default ({src, alt, size = 1}: Props) => (\n  <img\n    alt={alt || \"Logo\"}\n    src={src}\n    style={{height: `${size}em`, width: `${size}em`}}\n  />\n)","/home/steve/codes/algernon_dapp/app/src/utils/wallets/fortmatic.ts",["447"],"import Fortmatic from 'fortmatic'\nimport Web3 from 'web3'\nimport { CHAIN_ENDPOINT } from '../../config';\nimport base from './base'\n\nexport const getNewFortmaticInstance = () => {\n  console.log(`conencting Fortmatic wallet ${process.env.REACT_APP_FORTMATIC_API_KEY}`)\n  const fortmatic = new Fortmatic(\n    process.env.REACT_APP_FORTMATIC_API_KEY!,\n    {\n      rpcUrl: CHAIN_ENDPOINT!,\n      chainId: 1337\n    })\n    const provider = fortmatic.getProvider();\n    // @ts-ignore\n    return [ new Web3(provider), provider];\n}\n\n  export default {\n    ...base,\n    connectWallet: getNewFortmaticInstance\n  }\n","/home/steve/codes/algernon_dapp/app/src/utils/wallets/metamask.ts",["448"],"import Web3 from 'web3'\nimport base from './base'\n\nconst connectMetamask = async () => {\n  console.log(`conencting MetaMask wallet`)\n  // @ts-ignore\n  if (window.ethereum) {\n    // @ts-ignore\n    window.web3 = new Web3(window.ethereum);\n    // @ts-ignore\n    await window.ethereum.enable();\n    // @ts-ignore\n    return [ window.web3, window.web3.currentProvider ];\n  }\n  return false;\n}\n\nexport default {\n  ...base,\n  connectWallet: connectMetamask\n}","/home/steve/codes/algernon_dapp/app/src/utils/wallets/base.ts",["449"],"export default {\n  getAddress: async (wallet: any) => {\n    const [ address ] = await wallet.eth.getAccounts()\n    return address;\n  }\n}",{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","severity":1,"message":"455","line":41,"column":1,"nodeType":"456","endLine":52,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":11,"column":1,"nodeType":"456","endLine":23,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":14,"column":1,"nodeType":"456","endLine":47,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":12,"column":1,"nodeType":"456","endLine":41,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":40,"column":1,"nodeType":"456","endLine":67,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":11,"column":1,"nodeType":"456","endLine":24,"endColumn":2},{"ruleId":"457","severity":1,"message":"458","line":45,"column":6,"nodeType":"459","endLine":45,"endColumn":12,"suggestions":"460"},{"ruleId":"457","severity":1,"message":"461","line":45,"column":7,"nodeType":"462","endLine":45,"endColumn":11},{"ruleId":"454","severity":1,"message":"455","line":12,"column":1,"nodeType":"456","endLine":31,"endColumn":2},{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","severity":1,"message":"455","line":11,"column":1,"nodeType":"456","endLine":30,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":3,"column":1,"nodeType":"456","endLine":6,"endColumn":9},{"ruleId":"454","severity":1,"message":"455","line":12,"column":1,"nodeType":"456","endLine":27,"endColumn":2},{"ruleId":"463","severity":1,"message":"464","line":18,"column":44,"nodeType":"465","messageId":"466","endLine":18,"endColumn":46},{"ruleId":"454","severity":1,"message":"455","line":5,"column":1,"nodeType":"456","endLine":18,"endColumn":14},{"ruleId":"467","severity":1,"message":"468","line":1,"column":8,"nodeType":"469","messageId":"470","endLine":1,"endColumn":13},{"ruleId":"454","severity":1,"message":"455","line":4,"column":1,"nodeType":"456","endLine":18,"endColumn":2},{"ruleId":"467","severity":1,"message":"471","line":5,"column":19,"nodeType":"469","messageId":"470","endLine":5,"endColumn":29},{"ruleId":"457","severity":1,"message":"461","line":15,"column":7,"nodeType":"462","endLine":15,"endColumn":11},{"ruleId":"454","severity":1,"message":"455","line":3,"column":1,"nodeType":"456","endLine":27,"endColumn":2},{"ruleId":"472","severity":1,"message":"473","line":2,"column":20,"nodeType":"469","messageId":"470","endLine":2,"endColumn":32},{"ruleId":"472","severity":1,"message":"474","line":12,"column":11,"nodeType":"469","messageId":"470","endLine":12,"endColumn":31},{"ruleId":"472","severity":1,"message":"475","line":12,"column":7,"nodeType":"469","messageId":"470","endLine":12,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":40,"column":1,"nodeType":"456","endLine":142,"endColumn":2},{"ruleId":"472","severity":1,"message":"476","line":108,"column":9,"nodeType":"469","messageId":"470","endLine":108,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":7,"column":1,"nodeType":"456","endLine":14,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":4,"column":1,"nodeType":"456","endLine":8,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":4,"column":1,"nodeType":"456","endLine":7,"endColumn":11},{"ruleId":"454","severity":1,"message":"455","line":9,"column":1,"nodeType":"456","endLine":31,"endColumn":4},{"ruleId":"454","severity":1,"message":"455","line":4,"column":1,"nodeType":"456","endLine":12,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":6,"column":1,"nodeType":"456","endLine":22,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":4,"column":1,"nodeType":"456","endLine":7,"endColumn":12},{"ruleId":"454","severity":1,"message":"455","line":4,"column":1,"nodeType":"456","endLine":17,"endColumn":2},{"ruleId":"457","severity":1,"message":"477","line":10,"column":6,"nodeType":"459","endLine":10,"endColumn":15,"suggestions":"478"},{"ruleId":"479","severity":1,"message":"480","line":54,"column":3,"nodeType":"481","messageId":"482","endLine":71,"endColumn":4},{"ruleId":"454","severity":1,"message":"455","line":3,"column":1,"nodeType":"456","endLine":8,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":7,"column":1,"nodeType":"456","endLine":21,"endColumn":2},{"ruleId":"472","severity":1,"message":"483","line":5,"column":10,"nodeType":"469","messageId":"470","endLine":5,"endColumn":13},{"ruleId":"454","severity":1,"message":"455","line":7,"column":1,"nodeType":"456","endLine":17,"endColumn":2},{"ruleId":"472","severity":1,"message":"484","line":2,"column":8,"nodeType":"469","messageId":"470","endLine":2,"endColumn":12},{"ruleId":"472","severity":1,"message":"485","line":3,"column":7,"nodeType":"469","messageId":"470","endLine":3,"endColumn":26},{"ruleId":"479","severity":1,"message":"480","line":6,"column":3,"nodeType":"481","messageId":"482","endLine":16,"endColumn":4},{"ruleId":"454","severity":1,"message":"455","line":5,"column":1,"nodeType":"456","endLine":11,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":5,"column":1,"nodeType":"456","endLine":11,"endColumn":2},{"ruleId":"454","severity":1,"message":"486","line":4,"column":1,"nodeType":"456","endLine":7,"endColumn":2},{"ruleId":"454","severity":1,"message":"455","line":9,"column":1,"nodeType":"456","endLine":15,"endColumn":2},{"ruleId":"454","severity":1,"message":"486","line":19,"column":3,"nodeType":"456","endLine":22,"endColumn":4},{"ruleId":"454","severity":1,"message":"486","line":18,"column":1,"nodeType":"456","endLine":21,"endColumn":2},{"ruleId":"454","severity":1,"message":"486","line":1,"column":1,"nodeType":"456","endLine":6,"endColumn":2},"no-native-reassign",["487"],"no-negated-in-lhs",["488"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'contextValue.setClient'. Either include it or remove the dependency array.","ArrayExpression",["489"],"The null literal is not a valid dependency because it never changes. You can safely remove it.","Literal","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'setAccount' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'useLazyQuery' is defined but never used.","'TagFilteredQueryVars' is defined but never used.","'UserConnection' is assigned a value but never used.","'editableMeta' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'error', 'handleResponse', 'requestFinished', and 'response'. Either include them or remove the dependency array. If 'handleResponse' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["490"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'any' is defined but never used.","'web3' is defined but never used.","'getLatestDeployment' is assigned a value but never used.","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation",{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},"Update the dependencies array to be: [contextValue.setClient]",{"range":"495","text":"496"},"Update the dependencies array to be: [error, handleResponse, loading, requestFinished, response]",{"range":"497","text":"498"},[1105,1111],"[contextValue.setClient]",[351,360],"[error, handleResponse, loading, requestFinished, response]"]